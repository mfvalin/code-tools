#!/bin/ksh
#
######################################################################################
#
# Script s.compile, M.Valin, 2011-04-15
#
#
######################################################################################
#
# Ce script permet de compiler des sources (.c, .f, .ftn, .ftn90, .f90, .cdk90, .s) 
# et de generer les objets .o . Il transforme les .ftn(90) en .f(90) avec r.ftnpp
# On appelle (sur demande) le script s.make_exec.dot qui cree l'absolu correspondant
# Les arguments sont traites a l'aide de cclargs
# 
######################################################################################
#
# Historique des modifications
#
# 2000
#
# 28 janvier 13h16: change 
# 24 mars: ajout chmod pour les .f generes par r.ftnpp
# 19 avril: ajout de la cle -modele
# 26 avril: ajout de la cle -P
# 26 avril: pas de basename pour les .o
# 26 avril: modification pour l'utilisation de s.makebidon_101
# 27 avril: ajout de la cle -conly
#  5 mai: ajout des cles pour traitement des erreurs (-liste, -ignorerr, -log)
# 26 mai: ajout de la cle version pour les modeles
# 31 mai: ajout de la cle bindir 
# 14 juin: ajout des cles -optc et -optf
# 28 juin: on prend $HOME/userlibs/$FULL_ABI/Compiler_rules si present
# 24 aout: ajout type .cdk90
# 13 octobre: modification pour accrocher mpiw plutot que mpi pour 64 bits SX5
# 16 octobre: ajustements pour utiliser le crosskit 10.1
# 19 octobre: verification de l'existence des .cdk90 specifies (probleme *.cdk90)
# 00 novembre: ajout ftn90
# 5 decembre: shared objects
#
# 2001
#
# 17 janvier: ajout de l'option -mpi stubs
# 23 janvier: ajout de l'option -codebeta
# 29 janvier: ajout de l'option -ignorempty
#  1 fevrier: forcage crosskit 8.2 pour SX4
#  8 fevrier: ajout c_fstd89.o
#  7 juin: swuse maintenant dans Compiler_rules
# 27 septembre: devectorisation des .o
# 30 octobre: option -prof et -use_malib
# 15 novembre: changement separateur cclargs (':' vers '') et makebidon en c
#
# 2003
# 29 septembre: ajustement de comportement en fonction du nom d'appel ..._ beta ou ...
# 29 septembre: option -vector ( ou -vector safe )
# 29 septembre: option -beta
#
# 2004
# 25 mars option -python
#
# 2006
# 20 fevrier: remplacement de r.ftnpp par r.gpp version 021, L.Chardon
#
# 2007
# juillet: ajout de l'utilisation des PATHs derives de ssm ( EC_INCLUDE_PATH EC_LD_LIBRARY_PATH ) M.Lepine (version 022/023)
# septembre: ajout de WITH/WITHOUT_OpenMP et r.compiler_rules.dot  M.Valin (version 024/025)
# novembre: fusion de r.build a r.compile + bugfix F90C mode shared, (M. Lepine) version 026
#           ajout de set -e / set +e autour de eval cclargs (M.Valin) version 026
#           reconnaissance des extensions .for et C++ ,fonction oncompile, (M. Lepine) version 027
# 2008
# janvier: correction test pour compilation .for + protection au cas ou le link ne fonctionne pas, (M. Lepine) version 028
# avril: ajout de la cle compdir et de la cle strict (M. Lepine) version 029
# avril: reconnaissance des extension .F et .F90 pour traitement sans preprocesseur (M. Lepine) version 030
# septembre: correction pour passage des options d'optimisations a LD (L. Chardon) version 031
# octobre: separation des .F et .F90 (necessaire sur IBM) M. Lepine, version 032
#
# 2010
# avril: correction pour aller chercher les .o du codebeta dans $EC_LD_LIBRARY_PATH  (M. Lepine) version 033
#
# 2011
# fevrier: transformation en s.compile, includes pris a la meme source que s.f90 s.cc etc... version 034.1
# 2012
# mars: reconnaissance de -bindir . version 034.1.u
######################################################################################
function oncompile
{
  compilateur_et_options=$1
  lecode=$2
  options_supp=$3
	if [[ -z ${varlog} ]] then
	  echo 
	  echo  Commande effectuee
	  echo  "${compilateur_et_options} $options_supp $lecode ${MPILIB}"
	  ${compilateur_et_options} $options_supp $lecode ${MPILIB}
	  STATUT=$?
	else
	  echo 
	  echo  Commande effectuee
	  echo  "${compilateur_et_options} $options_supp $lecode ${MPILIB} >> ${varlog} 2>&1"
	  ${compilateur_et_options} $options_supp $lecode ${MPILIB} >> ${varlog} 2>&1
	  STATUT=$?
	fi
	if [[ $STATUT != 0 ]] then
	   if [[ -n $liste ]] then
	      echo "${lecode} : erreur, `date`" >> $liste
	   fi
           if [[ $ignorerr == OFF ]] then
		echo '*********************'
		echo 'ERREUR DE COMPILATION'
		echo '*********************'
                exit 1
	   fi
	else
	   if [[ -n $liste ]] then
	      echo "${lecode} : ok, `date`" >> $liste
	   fi
	fi
}
export IamCalled=${0##*/}
export ShortName=${IamCalled%%_*}
export Use_Beta=${Use_Beta:-${0##*${ShortName}}}
echo ${ShortName} version 034.1.u
if [ $# -eq 0 ]
then
echo "usage: $0 -src source1.f|c|ftn|cdk90 [options] [-o a.out]"
echo "exemple: $0 -src toto.f -n64 _o32 -o toto"
echo "Avertissement: ne pas avoir de fichier .f90 et .cdk90 qui portent"
echo "               le meme nom: des risques de collision et/ou effacement"
echo "               sont possibles"
set -h
fi
export ARCH=${EC_ARCH:-$ARCH}
export EC_ARCH=${EC_ARCH:-$ARCH}
set -e
eval `cclargs_lite -D '' $0 "[Compiler des sources .f, .f90, .c, etc...]"\
 -src "" "" "[Fichiers sources]"\
 -opt "" "" "[Options de compilation supplementaires globales (=-option1 =-option2...)]"\
 -optc "" "" "[Options de compilation supplementaires C (=-option1 =-option2...)]"\
 -optf "" "" "[Options de compilation supplementaires Fortran (=-option1 =-option2...)]"\
 -defines "" "" "[Listes des defines ( =-Dnom1=def1:-Dnom2=def2 ...)]"\
 -includes "" "" "[Includes supplementaires (path1 path2 ...)]"\
 -multi "" "_multi" "[Multi ou Stack]"\
 -mpi  "" "mpi" "[Message Passing Interface]"\
 -shared "" "SHARED" "[Shared objects]"\
 -fast "" "FAST" "[Option FAST]"\
 -options_comp "" "OPTIONS" "[CoMpIlAtIoN_OpTiOnS ligne 1 du source]"\
 -float1 "" "_float1" "[option -float1]"\
 -obj "" "" "[Fichiers objets supplementaires]"\
 -abi "$ABI" "$ABI" "[Variable ABI, prioritaire sur -n64, -multi, -float1]"\
 -arch "" "$EC_ARCH" "[Architecture destination (HP-UX,IRIX64, SX4, SX5, LINUX)]"\
 -bidon "NULL" "fortran" "[Si s.makebidon est necessaire]"\
 -main "" "" "[Nom du ou des programmes a appeler dans le code pour s.makebidon]"\
 -o "" "" "[Nom de l'absolu si r.make est appele]"\
 -libpath "" "" "[Path de librairies supplementaires]"\
 -libappl "" "" "[Librairie d'application usager]"\
 -libgraph "" "graph" "[Librairie NCAR locale  (graph par defaut)]"\
 -libsys "" "" "[Librairies supplementaires]"\
 -librmn "" "rmn" "[Librairie RMN utilisee (rmn par defaut)]"\
 -libpriv "" "priv" "[Librairie libpriv utilisee (priv par defaut)]"\
 -O "1" "2" "[Niveau d'optimisation ( -O 0...4)]"\
 -debug "NODEBUG" "DEBUG" "[Options de deboggage des compilateurs]"\
 -fstd89 "" "fstd89.o" "[Version 89 des fichiers standards]"\
 -modele "" "" "[Usage des librairies d'un modele (mc2, gem, etc...)]"\
 -version "current" "current" "[Version du modele utilise (1.9.8, etc...)]"\
 -P      "" "ppro" "[Pre-processing seulement]"\
 -conly "" "conly" "[Construction de l'absolu avec cc]"\
 -log "" "compile.log" "[Specifie le fichier log de compilation]"\
 -liste "" "compile.liste" "[Specifie le fichier de la liste des codes compiles]"\
 -ignorerr "OFF" "ON" "[Ignore les erreurs et poursuis la compilation"\
 -ignorempty "OFF" "ON" "[Ignore les ftn et ftn90 vides et poursuis la compilation"\
 -bindir "" "" "[Specifie le repertoire de destination des binaires (.o)]"\
 -codebeta "" "" "[modules rmnlib a charger a partir d'un .o]"\
 -use_malib "" "" "[Librairies a deballer et a utiliser]" \
 -prof "OFF" "ON" "[Utilisation du profiler si disponible]"\
 -openmp "OFF" "ON" "[Utilisation d'OpenMP]"\
 -vector "" "ON" "[Utilisation des programmatheques vectorielles]"\
 -beta "${Use_Beta}" "_beta" "[Forcer version Beta]"\
 -python "" "python" "[Avec python]" \
 -compdir "" "" "[Specifie le repertoire ou l'on s'installe pour faire la compilation"\
 -strict "No" "Yes" "[abort dans le cas d'un objet manquant]"\
 ++ "$@"`
[[ "$bindir" == "." ]] && unset bindir
set +e
Use_Beta=$beta
if [[ "$Use_Beta" = _beta* ]] ; then 
  echo Using $Use_Beta version ; export Rules_Beta=$Use_Beta ; export Use_Beta="_beta" ; else export Use_Beta="" ;
fi
###
# Options
####
[[ -n $arch ]] && echo "WARNING: -arch option is DEPRECATED"
DIRBASE="$(s.prefix -I ${EC_INCLUDE_PATH} ${ARMNLIB}/include)"
GPP_OPTS="-chop_bang -gpp -F ${DIRBASE} -D__FILE__=\"#file\" -D__LINE__=#line"
arch=${arch:-${EC_ARCH}}

if [[ ${arch} != ${EC_ARCH} ]] then
  echo " "
  echo "*******************************************************************"
  echo "ERROR: cross-compiler not available, pls compile on target platform"
  echo "*******************************************************************"
  echo " "
  exit 1
fi

FULL_ABI=${EC_ARCH}

#######
# Obtention des compiler rules, ajouter $ARMNLIB/include et co. s'il sont presents
#######
. s.get_compiler_rules.dot ""
[[ -z $shared ]] && FC_options="${FC_options} ${FC_STATIC}" && CC_options="${CC_options} ${CC_STATIC}"
[[ -d $ARMNLIB/include ]] && includes="$includes ${ARMNLIB}/include"
[[ -d $ARMNLIB/include/${EC_ARCH} ]] && includes="$includes ${ARMNLIB}/include/${EC_ARCH}"

if [[ "$vector" == "ON"   ]] ; then vector=$VECTOR_LIBS      ; fi
if [[ "$vector" == "safe" ]] ; then vector=$VECTOR_LIBS_safe ; fi
if [[ "$vector" == "SAFE" ]] ; then vector=$VECTOR_LIBS_safe ; fi

defines="${defines} ${define}"

if [[ $prof == ON ]] then 
    opt="$opt $prof_option"
fi
if [[ $openmp == ON ]] then 
    optf="$optf $OPENMP"
    optc="$optc $OPENMPCC"
    defines="${defines} -DWITH_OpenMP"
else
    defines="${defines} -DWITHOUT_OpenMP"
fi

if [[ $debug == NODEBUG ]] then
	unset O_DEBUG
	unset O_DEBUG_C
else
	O_DEBUG_C=${O_DEBUG_C:-$O_DEBUG}
fi

libpath="${HOME}/userlibs/${FULL_ABI} ${libpath}"
if [[ "python" != "$python" ]] ; then unset Python_includes ; fi
includes="$includes ./Sources."
if [[ "$compdir" != "" ]] then
  if [[ "$compdir" == "$(true_path .)" ]] then
    echo '*********************************************'
    echo 's.compile error: compdir is current directory'
    echo '*********************************************'
    exit 2;
  fi
  includes="$(true_path .) $includes"
  echo 'Debug includes='${includes}
  set -A src_temp ${src}
  cptr=0
  for fn in ${src_temp[@]} ; do
    if [[ -f $fn ]] then
      src_temp[((cptr))]=$(basename $fn)
      if [[ -f ${compdir}/$(basename $fn) ]] then
        echo '*********************************************'
        echo 's.compile error linking ' $fn to ${compdir}/$(basename $fn) ': file alredy exist'; exit 1
        echo '*********************************************'
      fi
      ln -s $(true_path $fn) $compdir
      ((cptr=cptr+1))
    else
      src_temp[((cptr))]=''
      ((cptr=cptr+1))
    fi
  done;
  src="${src_temp[@]}"
  cd $compdir
fi
set -A vincludes ${includes} ${EC_INCLUDE_PATH} ${Python_includes} /usr/include
set -A vincludesc ${includes} ${EC_INCLUDE_PATH} ${Python_includes}
set -A pathlib ${libpath} ${EC_LD_LIBRARY_PATH}
set -A pathlibc ${libpath} ${EC_LD_LIBRARY_PATH}
set -A appllib ${libappl} ${vector}
set -A syslib ${LIBSYS} ${libsys}
compteur=0
for item in ${vincludes[@]}; do
	vincludes[((compteur))]=${Iprefix}${vincludes[((compteur))]}
	((compteur=compteur+1))		
done;
compteur=0
for item in ${vincludesc[@]}; do
	vincludesc[((compteur))]=-I${vincludesc[((compteur))]}
	((compteur=compteur+1))		
done;
for item in ${defines}; do
        vdefines="${vdefines} ${Dprefix}${item}"
done;
compteur=0
for item in ${pathlib[@]}; do
	pathlib[((compteur))]=${Lprefix}${pathlib[((compteur))]}
	pathlibc[((compteur))]=-L${pathlibc[((compteur))]}
	((compteur=compteur+1))		
done;
compteur=0
for item in ${appllib[@]}; do
	appllib[((compteur))]=${lprefix}${appllib[((compteur))]}
	((compteur=compteur+1))		
done;
compteur=0
for item in ${syslib[@]}; do
	syslib[((compteur))]=${lprefix}${syslib[((compteur))]}
	((compteur=compteur+1))		
done;



libgraph="${libgraph:+${lprefix}${libgraph}}"
librmn="${librmn:+${lprefix}${librmn}}"
libpriv="${libpriv:+${lprefix}${libpriv}}"

# Mettre les sources dans un vecteur: plus facile pour la suite
# initialiser les vecteurs de Fortran, de C et  d'options de compilation

set -A sources ${src}
set -A sources_c ${src}
set -A sources_cpp ${src}
set -A sources_f ${src}
set -A sources_f90 ${src}
set -A sources_for ${src}
set -A sources_F ${src}
set -A sources_F90 ${src}
set -A extra_options ${src}
set -A tempo ${src}



compteur=0

#######
# Transformer les .ftn en .f et on regarde les options supplementaires
# On separe aussi le C du Fortran
#######

#######
# Nombre de sources de chaque type
#######

 nbf=0
 nbf90=0
 nbF=0
 nbF90=0
 nbfor=0
 nbc=0
 nbcpp=0
 nbs=0
let STATUT_TOT=0
for fichier in ${sources[@]}; do
	extra_options[((compteur))]=""
	tempo[((compteur))]=""
	sources_c[((compteur))]=""
	sources_s[((compteur))]=""
	sources_f[((compteur))]=""
	sources_f90[((compteur))]=""
	sources_for[((compteur))]=""
	sources_F[((compteur))]=""
	sources_F90[((compteur))]=""
	sources_cpp[((compteur))]=""
	case  ${fichier} in
	    ( *.ftn )    nombase=$(basename ${fichier%%.ftn})
			 if [[ -f ./`basename ${fichier%%.ftn}`.f ]] then
				chmod 644 ./${nombase}.f
			 fi
                         r.gppf ${GPP_OPTS} ${vincludes[@]} $defines ${fichier} > ./${nombase}.f
                         let STATUT_TOT=STATUT_TOT+$?
			 chmod 444  ./${nombase}.f
			 echo "r.gppf ${GPP_OPTS} ${vincludes[@]} $defines ${fichier} > ./${nombase}.f"
        	         sources[((compteur))]=./${nombase}.f
			 if [[ $ignorempty = ON ]] then
			   if [[ ! -s ./${nombase}.f ]] then
			     rm -f ./${nombase}.o 2>/dev/null
			     touch ./${nombase}.o
			   else
		           sources_f[((compteur))]=${sources[((compteur))]}
			   ((nbf=nbf+1))
			 fi
			 else
		         sources_f[((compteur))]=${sources[((compteur))]}
			 ((nbf=nbf+1))
			 fi ;;
	    ( *.ptn )    nombase=`basename ${fichier%%.ptn}`
		         if [[ -f ./`basename ${fichier%%.ptn}`.f ]] then
				chmod 644 ./${nombase}.f
			 fi
                         r.gppf ${GPP_OPTS} ${vincludes[@]} $defines ${fichier} | \
                         let STATUT_TOT=STATUT_TOT+$?
                         sed 's/^[[:blank:]].*PROGRAM /      SUBROUTINE /' | sed 's/^[[:blank:]].*program /        subroutine /' \
                         > ./${nombase}.f
			
			 chmod 444  ./${nombase}.f
			 echo "r.gppf ${GPP_OPTS} ${vincludes[@]} $defines ${fichier} \| sed .... > ./${nombase}.f"
        	         sources[((compteur))]=./${nombase}.f
			 if [[ $ignorempty = ON ]] then
			   if [[ ! -s ./${nombase}.f ]] then
			     rm -f ./${nombase}.o 2>/dev/null
			     touch ./${nombase}.o
			   else
		           sources_f[((compteur))]=${sources[((compteur))]}
			   ((nbf=nbf+1))
			 fi
			 else
		         sources_f[((compteur))]=${sources[((compteur))]}
			 ((nbf=nbf+1))
			 fi ;;
	    ( *.ftn90 )  if [[ -f ./`basename ${fichier%%.ftn90}`.f90 ]] then
				chmod 644 ./`basename ${fichier%%.ftn90}`.f90
			 fi
                        r.gppf -lang-f90+ ${GPP_OPTS} ${vincludes[@]} $defines ${fichier} > ./`basename ${fichier%%.ftn90}`.f90
						let STATUT_TOT=STATUT_TOT+$?
 				chmod 444  ./`basename ${fichier%%.ftn90}`.f90
			 echo "r.gppf -lang-f90+ ${GPP_OPTS} ${vincludes[@]} $defines ${fichier} > ./`basename ${fichier%%.ftn90}`.f90"
        	         sources[((compteur))]=./`basename ${fichier%%.ftn90}`.f90
		         sources_f90[((compteur))]=${sources[((compteur))]}
			 ((nbf90=nbf90+1));;
            ( *.for )    nombase=$(basename ${fichier%%.for})
			 if [[ -f ./`basename ${fichier%%.for}`.f ]] then
				chmod 644 ./${nombase}.f
			 fi
                         ln -s $fichier ./${nombase}.f
                         let STATUT_TOT=STATUT_TOT+$?
			 chmod 444  ./${nombase}.f
        	         sources[((compteur))]=./${nombase}.f
			 if [[ $ignorempty = ON ]] then
			   if [[ ! -s ./${nombase}.f ]] then
			     rm -f ./${nombase}.o 2>/dev/null
			     touch ./${nombase}.o
			   else
		           sources_for[((compteur))]=${sources[((compteur))]}
			   ((nbfor=nbfor+1))
			 fi
			 else
		         sources_for[((compteur))]=${sources[((compteur))]}
			 ((nbfor=nbfor+1))
			 fi ;;
	    ( *.f )	 sources_f[((compteur))]=$fichier;((nbf=nbf+1));;
	    ( *.f90 )	 sources_f90[((compteur))]=$fichier;((nbf90=nbf90+1));;
	    ( *.F )      sources_F[((compteur))]=$fichier;((nbF=nbF+1));;
	    ( *.F90 )    sources_F90[((compteur))]=$fichier;((nbF90=nbF90+1));;
	    ( *.c )      sources_c[((compteur))]=$fichier;((nbc=nbc+1));;
	    ( *.C|*.CPP|*.cxx|*.c++|*.cpp|*.cc|*.cp )      sources_cpp[((compteur))]=$fichier;((nbcpp=nbcpp+1));;
	    ( *.cdk90 )  ls ${fichier} 1>/dev/null 2>&1
			 status=$?
			 chmod 644 ${fichier%%.cdk90}.f90 2>/dev/null
			 if [[ $status = 0 ]] then			      
                            r.gppf -lang-f90+ ${GPP_OPTS} ${vincludes[@]} $defines ${fichier} > ./`basename ${fichier%%.cdk90}`.f90
                            let STATUT_TOT=STATUT_TOT+$?
			    sources[((compteur))]=./`basename ${fichier%%.cdk90}`.f90
			    sources_f90[((compteur))]=${sources[((compteur))]}
			    chmod 444 ${fichier%%.cdk90}.f90 2>/dev/null
			    ((nbf90=nbf90+1)) 
			 else
			    echo "s.compile: WARNING  '${fichier}' not found, SKIPPING"
			 fi;;			 
	    ( *.s )      sources_s[((compteur))]=$fichier;((nbs=nbs+1));;
	    ( * )        echo "s.compile: ERROR unknown source type '$fichier'" >&2;exit 1;;
	esac

# Redondant: on fait ce check pour chaque source, mais ne coute pas cher
	
	if [[ ${options_comp} = OPTIONS ]]
        then
#	then echo 'On extrait les options du fichier source '${fichier} >&2
	    raw_options=$(head -1 $fichier)
	    if [[ ${raw_options} = *CoMpIlAtIoN_OpTiOnS* ]]
 	    then tempo[((compteur))]=${raw_options#*::}
	       if [[ ${tempo[((compteur))]} = *$arch* ]]
	       then raw_options=${tempo[((compteur))]#*$arch=}
	          extra_options[((compteur))]=${raw_options%%::*}
	       fi
	    fi
	fi
	((compteur=compteur+1))		
done;
if [[ "$STATUT_TOT" != "0" ]]
then
  echo =====================================================
  echo     PREPROCESSING ERRORS / ERREUR DE PRETRAITEMENT
  echo     ERROR_STATUS=$STATUT_TOT
  echo =====================================================
  if [[ x$liste != x ]] then
     echo ===================================================== >>$liste
     echo     PREPROCESSING ERRORS / ERREUR DE PRETRAITEMENT >>$liste
     echo     ERROR_STATUS=$STATUT_TOT >>$liste
     echo ===================================================== >>$liste
     echo "r.gppf : erreur, `date`" >> $liste
  fi
  if [[ $ignorerr == OFF ]] then
	echo '*********************'
	echo 'ERREUR DE COMPILATION'
	echo '*********************'
        exit 1
  fi
fi
if [[ $P == ppro ]] then
	echo "pre-processing termine, exit"; exit 0
fi

####
# Cas special MPI
####
if [[ $mpi = mpi ]] then
F90C=${MPI_F90C:-${MPI_FC:-${F90C:-$FC}}}
FC=${MPI_FC:-$FC}
CC=${MPI_CC:-$CC}
CPP=${MPI_CPP:-$CPP}
MPISX=$MPI_SX
MULTIC=$MULTI_c
# Cas o32 sur SGI
  if [[ $MPI_LIB = NONE ]] then
  unset MPILIB
  else
  MPILIB=${lprefix}${MPI_LIB:-mpi}
  fi
fi

if [[ $shared = SHARED ]] then
    FC="${FC} ${FC_SHARED}"
    F90C="${F90C} ${FC_SHARED}"
    CC="${CC} ${CC_SHARED}"
    CPP="${CPP} ${CPP_SHARED}"
fi

alllib="${appllib[@]} ${libgraph} ${libpriv} ${librmn} ${syslib[@]}"
pathrmn="${Lprefix}${ARMNLIB}/lib/${FULL_ABI}"

###
# fichier log
###

if [[ x$log != x ]] then
  varlog="$log"
fi

if [[ x$bindir != x ]] then
  if [[ ! -d $bindir ]] then
	echo Repertoire $bindir inexistant
	exit 1
  fi

  if [[ ! -w $bindir ]] then
	echo Mauvaises permissions dans $bindir
	exit 1
  fi
fi
####
# Compilation 
####
ALL_FC_options="${vincludes[@]} ${FC_options} ${F_Opt[((O))]} ${optf} ${opt} ${MPISX} ${O_DEBUG}"
ALL_FC_options_LD="${pathlib[@]} ${pathrmn} ${FC_options} ${F_Opt[((O))]} ${FC_LD_options} ${optf} ${opt} ${MPISX} ${O_DEBUG}"
ALL_CC_options="${vincludesc[@]} ${CC_options} ${C_Opt[((O))]} ${optc} ${opt} ${MPISX} ${MULTIC} ${defines} ${O_DEBUG_C}"
ALL_CC_options_LD="${pathlibc[@]} ${pathrmn} ${CC_options} ${C_Opt[((O))]} ${CC_LD_options} ${optc} ${opt} ${MPISX} ${MULTIC} ${defines} ${O_DEBUG_C}"
ALL_CPP_options="${vincludesc[@]} ${CPP_options} ${C_Opt[((O))]} ${optc} ${opt} ${MPISX} ${MULTIC} ${defines} ${O_DEBUG_C}"
ALL_CPP_options_LD="${pathlibc[@]} ${pathrmn} ${CPP_options} ${C_Opt[((O))]} ${CPP_LD_options} ${optc} ${opt} ${MPISX} ${MULTIC} ${defines} ${O_DEBUG_C}"
ligne_comp_f="${FC:-f90} -c ${ALL_FC_options}"
ligne_comp_f90="${F90C:-$FC} -c ${ALL_FC_options}"
ligne_comp_F="${FC:-f90} -c ${ALL_FC_options} ${vincludes[@]} ${vdefines}"
ligne_comp_F90="${F90C:-$FC} -c ${ALL_FC_options} ${vincludes[@]} ${vdefines}"
ligne_comp_c="${CC:-cc} -c ${ALL_CC_options}" 
ligne_comp_cpp="${CPP:-gcc} -c ${ALL_CPP_options}"
ligne_comp_s="s.as -arch ${arch}" 
if [[ ${options_comp} = OPTIONS ]]
    then
    compteur=0
    for fichier in ${sources_f[@]}
    do	
        echo "On compile avec des options supplementaires ="${extra_options[compteur]} >&2
        oncompile "$ligne_comp_f" "${fichier}" "${extra_options[compteur]}"
	((compteur=compteur+1))  
    done
    compteur=0
    for fichier in ${sources_for[@]}
    do	
        echo "On compile avec des options supplementaires ="${extra_options[compteur]} >&2
        oncompile "$ligne_comp_f" "${fichier}" "${extra_options[compteur]}"
	((compteur=compteur+1))  
    done
    compteur=0
    for fichier in ${sources_f90[@]}
    do	
        echo "On compile avec des options supplementaires ="${extra_options[compteur]} >&2
        oncompile "$ligne_comp_f90" "${fichier}" "${extra_options[compteur]}"
	((compteur=compteur+1))  
    done
    compteur=0
    for fichier in ${sources_c[@]}
    do	
        echo "On compile avec des options supplementaires ="${extra_options[compteur]} >&2
        oncompile "$ligne_comp_c" "${fichier}" "${extra_options[compteur]}"
	((compteur=compteur+1)) 
    done
    compteur=0
    for fichier in ${sources_cpp[@]}
    do	
        echo "On compile avec des options supplementaires ="${extra_options[compteur]} >&2
        oncompile "$ligne_comp_cpp" "${fichier}" "${extra_options[compteur]}"
	((compteur=compteur+1)) 
    done
    compteur=0
    for fichier in ${sources_s[@]}
    do	
        echo "On compile avec des options supplementaires ="${extra_options[compteur]} >&2
        oncompile "$ligne_comp_s" "${fichier}" "${extra_options[compteur]}"
	((compteur=compteur+1)) 
    done
else
  
    [[ ${nbf}   != 0 ]] && oncompile "$ligne_comp_f" "${sources_f[*]}"
    [[ ${nbfor} != 0 ]] && oncompile "$ligne_comp_f" "${sources_for[*]}" && rm ${sources_for[*]}
    [[ ${nbf90} != 0 ]] && oncompile "$ligne_comp_f90" "${sources_f90[*]}"
    [[ ${nbF}   != 0 ]] && oncompile "$ligne_comp_F" "${sources_F[*]}"
    [[ ${nbF90} != 0 ]] && oncompile "$ligne_comp_F90" "${sources_F90[*]}"
    [[ ${nbc}   != 0 ]] && oncompile "$ligne_comp_c" "${sources_c[*]}"
    [[ ${nbcpp} != 0 ]] && oncompile "$ligne_comp_cpp" "${sources_cpp[*]}"
    [[ ${nbs}   != 0 ]] && oncompile "$ligne_comp_s" "${sources_s[*]}"

fi

compteur=0
for objet in ${sources_f[@]} ${sources_f90[@]} ${sources_c[@]} ${sources_s[@]} ${sources_for[@]} ${sources_cpp[@]} ${sources_F[@]} ${sources_F90[@]}
do
  objets="${objets} `basename ${objet%%.c|.f|.f90|.s|.for|.F|.F90|.C|.CPP|.cxx|.c++|.cpp|.cc|.cp}.o`"
  ((compteur=compteur+1))
done;
objets="${objets} ${obj}"

if [[ x$bindir != x ]] then
#   mv ${objets[@]} ${bindir} 2>/dev/null;STATUT2=$?
   mv ${objets} ${bindir} 2>/dev/null;STATUT2=$?
   if [[ ${STATUT2} != 0 ]] then
#      cp ${objets[@]} ${bindir}; STATUT2=$? 
      cp ${objets} ${bindir}; STATUT2=$? 
      if [[ ${STATUT2} != 0 ]] then
          echo Probleme de copie de binaire; exit 1
      fi
#      rm -f ${objets[@]}
      rm -f ${objets}
   fi
    compteur=0
#    for objet in ${objets[@]}
    for objet in ${objets}
#    do objets[((compteur))]=$bindir/$objet
    do objets=="${objets} $bindir/$objet"
    ((compteur=compteur+1))
    done;
fi

####
# Appel a s.make_exec.dot
####

[[ ${fstd89} == fstd89* ]] && codebeta="$codebeta fstd89 c_fstd89" && ((compteur=compteur+2))
[[ ${mpi} == stubs ]] && codebeta="$codebeta rpn_comm_stubs" && ((compteur=compteur+1))
if [[ "$codebeta" != "" ]] then
    echo ""
    for betamodule in $codebeta ; do
        le_module_beta=$(s.locate_item ${betamodule}.o $EC_LD_LIBRARY_PATH ${ARMNLIB}/lib/${FULL_ABI})
        if [[ ${le_module_beta} != "" ]] 
        then
          objets="${objets} ${le_module_beta}"
          ((compteur=compteur+1))
          echo "le module '${betamodule}' sera '${le_module_beta}'"
        else
          echo '*************************************************'
          echo "s.compile: ERROR codebeta '${betamodule}' not found"
          echo '*************************************************'
          exit 3;
        fi
    done
    echo ""
fi

if [[ -n ${o} ]] then

    . s.make_exec.dot  
fi

# Menage des fichiers temporaires pour les cdk

for fichier in ${src}; do
    case $fichier in
       ( *.cdk90 ) rm -f ${fichier%%.cdk90}.f90 ;;
    esac
done;
if [[ "$compdir" != "" ]] then
  rm ${src}
fi
